1. The program seg-faults

2. We are in file ../stdlib/strtol_l.c and line 297

3. We looked at the stack frame had a call to atoi. We then typed 'up 2' to look 
at the variables at the time of that function call. To look at the value of the 
argument passed to atoi, we typed 'print argv[1]'. Yes, we can see that the 
argument passed to atoi was the null ptr.


4. $1 = 0x00 was printed (null ptr).

5. -1835 is printed when entering 'r 5'

6. On rerunning w/o restarting, we get the value of 5 in register $3. argc = 2. 
On printing the array argv, we get the following output: 
{0x7fffffffe50e "/mnt/home/hseaman/courses/cs105/ComputerSystems/Lab1/problem1", 
  0x7fffffffe54c "5"}

 The 0th argument is the file name, the 1st argument is the value passed as 
 argument to the program from the terminal.
 The value of first argument passed to the program from the terminal stayed 
 unchanged in memory from when we ran 'r 5.' The second argument in argv is the
 null pointer from when we ran the program a second time without any arguments. 

7. We wound up in the stdlib function atoi.c (line 26)

8. Using list in main prints the C program instructions around where the 
current instruction is. When we hit the return key, then gdb tells us that 
Line number 20 is out of range.

9. The return key appears to repeat the last command (in this case, s).

10. result is null, while a and b are not defined in the current context (not
in scope).

11. 4 lines shown to us: 
	6	    int result = a;
	(gdb) s
	5	    int i = 0;
	(gdb) 
	8		result += a;
	(gdb) 
	9		a -= b;

	The declarations/initializations are out of order from what we were
	expecting. It is because of using optimiser o1.

12. The program stops at the while(i < 256) instruction. Note that the compiler 
displays the instructions in a different order because of the use of 
optimizer o2 instead of o1. This could be because the check for the while 
condition gets executed after running the commands inside the while loop. This
is what happpens when the compiler optimises the C code into assembly.

13. 0x00000000004004ca is the address of the instruction that makes the function
call to atoi. 0x00000000004004f7 is the address of the instruction that calls 
printf.

14. 0x00000000004004e7 is the address of the instruction to the loop_while 
function. It is the line with the jne instruction. 

15. 

(gdb) p/x 42
$1 = 0x2a
(gdb) 
$2 = 0x2a
(gdb) p 0x2f
$3 = 47

16. The constant in the sub instruction is 0x10 or 16. This is the value of b
passed to loop_while from main. 

17. The call to loop_while was optimized out. The optimized program moves the 
program counter around rather than making a function call. 

18. Wow!

19. The initializations of i and result were swapped. 

Problem 2
==========

1. The decimal value of puzzle1, i.e, 1078530011 is printed. 
2. 0x40490fdb was printed with p/x
3. It prints the same number, but in reverse order. This is probably a 
consequence of the direction in which the stack grows. 
4. puzzle1 was our favorite constant, pi.
5. The 7th and 8th decimal places are off from the exact value of pi (as seen 
in the internets). This is probably because of lack of absolute precision while 
performing floating point operations on computers. 
6. This is the number e using in Euler's Formula.
7. No not really
8. It is correct to 15 decimal places, but at the 16th place the value is 1 
instead of the correct value 2. This is also due to the lack of absolute
precision in numerical representation.
9. It is the sequence of chars spelling out "Was that really so hard?"
10. No because the output at the breakpoint specifies the input to the
call to fix_array. It says that the input variable a_size is 10. It
displays with the following syntax: a_size=a_size@entry=10.
11. The value of a is (int *) 0x602010 according to gdb.
12. After 6 steps the program is in the hmc_pomona_fix function and a
is out of scope. We are not able to display a while in this function call.
13. After a seventh step we are able to display a. Its value has not changed
after finishing the call to hmc_pomona_fix. This is the behavior we expect
based on our understanding of the code.
14. Using next instead of step allows us to go back to the beginning of
the for-loop rather than stepping through hmc_pomona_fix.
15. Using next takes us to the function call to hmc_pomona_fix as we
expect. This is the same behavior as if we used step. The value of a
is now 0x602014 which reflect the fact that a has been incremented.
16. gdb tells us that the pointer *a is pointing at the value 1. This
makes sense since 1 is value that a is currently pointing to.
17. We are at the beginning of the for loop on line 23. gdb outputs this as
23	    for (i = 0;  i < a_size;  i++, a++) {
18. Now a is 0x60202c since it has been further incremented.
19. The value that a is pointing to is now 13.

PART 3
=======

1. The output is 1 47 2 42 3. Notice that 42 and 47 have been swapped.
2. The program stops at line 29 in problem2.c
3. The program stops at line 35 in problem2.c
4. No.
5. 0x00000000004006b0 is the address of the breakpoint on line 35. The assembly
instruction corresponds to the part of the for loop in which i is set to 1.
6. info tells us that we set a breakpoint at line 36.
7. They are arrays containing 0s.
8. The program stops at line 36 (not surprisingly)
9. rip, eflags, cs, ss, and ds were not covered class (we think). 
10. None of the flags that we discussed in class are set. Only flags PF 
(Parity flag), IF (Interrupt Flag) and the ZF (Zero Flag) are set. Our guess is
that main+72 (the lea instruction) results in a zero, which in turn causes the 
ZF to be set. We read that the zero flag is reset to 0 when the an previously 
executed instruciton does not result in 0. This would also explain why the ZF is
set.
11. It appears that the value of this register is 0. When we print in hex we
get 0x0 as expected. The lower 32 bits of the register are also 0 as expected.
12. We see that the value stored in $rip is first 16 instructions for the 
fix_array function. The register $rip cannot hold the full set of instructions
because it is not big enough. When we tried the same command on $eip we got an
error saying "Value can't be converted to integer".
13. We are in the for loop inside the fix_array function.
14. We see that the instruction pointer indicates that the next instruction
to be executed is a call to hmc_pomona fix. The output is:
=> 0x40067c <fix_array+19>:	callq  0x400650 <hmc_pomona_fix>
15. We expect that stepi will take us into the hmc_pomona_fix function call
which, on our machine, is at memory address 0x400650. nexti should instead
take us over this function call to the next instruction (add) which here is
at 0x400683. When we test it out this is indeed what happens!
16. We see that the line number listed is line 26 in problem2.c. This is 
last line of the fix_array function at the ending curly brace
17. Using info registers shows that the value is 0x7fffffffe118	0x7fffffffe118.
Using the command "p/x *(int *)$rsp" (note the changed register compared to 
the lab writeup. We thought this might be a type since we are concerned with
%rsp rather than %ebp...) we get: 
$4 = 0x4006e7 

Last, the command "x/x $rsp" yielded:
0x7fffffffe118:	0x004006e7
showing that the value of the register is pointing to the memory address
0x4006e7
18. The stack pointer (%rsp) and the instruction pointer (%rip) both changed.
The old value of %rsp is 0x7fffffffe118	0x7fffffffe118 and the new value
is 0x7fffffffe120	0x7fffffffe120. For %rip the old value is 
0x400693	0x400693 <fix_array+42> and the new value is
0x4006e7	0x4006e7 <main+83>

Yay.





